[{"/home/zanadh/Documents/technical_test/src/App.js":"1","/home/zanadh/Documents/technical_test/src/reportWebVitals.js":"2","/home/zanadh/Documents/technical_test/src/index.js":"3"},{"size":22640,"mtime":1606628222378,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1606473847618,"results":"6","hashOfConfig":"5"},{"size":506,"mtime":1606559222028,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1e3gwqs",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/zanadh/Documents/technical_test/src/App.js",["15"],"import React, { useEffect, useState } from 'react'\nimport './App.css';\nimport { PlusOutlined, MinusOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Button, Row, Col, Form, Input, Divider, Select, DatePicker, InputNumber, Modal } from 'antd';\nimport Axios from 'axios'\n\nconst { Option } = Select\n\nlet dataStatic = [\n  { \"id\": 1, \"employee_name\": \"Tiger Nixon\", \"employee_salary\": 320800, \"employee_age\": 61, \"profile_image\": \"\" },\n  { \"id\": 2, \"employee_name\": \"Garrett Winters\", \"employee_salary\": 170750, \"employee_age\": 63, \"profile_image\": \"\" },\n  { \"id\": 3, \"employee_name\": \"Ashton Cox\", \"employee_salary\": 86000, \"employee_age\": 66, \"profile_image\": \"\" },\n  { \"id\": 4, \"employee_name\": \"Cedric Kelly\", \"employee_salary\": 433060, \"employee_age\": 22, \"profile_image\": \"\" },\n  { \"id\": 5, \"employee_name\": \"Airi Satou\", \"employee_salary\": 162700, \"employee_age\": 33, \"profile_image\": \"\" }\n]\nlet dcStatic = [\n  { \"id\": 1, \"name\": \"DC Tangerang\" },\n  { \"id\": 2, \"name\": \"DC Jakarta\" },\n  { \"id\": 3, \"name\": \"DC Bandung\" },\n]\n\nlet paymentTypeStatic = [\n  { \"id\": 1, \"name\": \"Cash H+1\" },\n  { \"id\": 2, \"name\": \"Cash H+3\" },\n  { \"id\": 3, \"name\": \"Cash H+7\" },\n  { \"id\": 4, \"name\": \"Transfer H+1\" },\n  { \"id\": 5, \"name\": \"Transfer H+3\" },\n  { \"id\": 6, \"name\": \"Transfer H+7\" },\n]\n\nlet productStatic = [\n  {\n    product_name: 'product_1', units: [\n      { name: 'Karton', price: 35000 },\n      { name: 'Pak', price: 10000 },\n      { name: 'Pcs', price: 1000 }\n    ]\n  },\n  {\n    product_name: 'product_2', units: [\n      { name: 'Karton', price: 45000 },\n      { name: 'Pak', price: 7000 },\n      { name: 'Pcs', price: 500 }\n    ]\n  },\n  {\n    product_name: 'product_3', units: [\n      { name: 'Pak', price: 15000 },\n      { name: 'Pcs', price: 1500 }\n    ]\n  },\n]\n\n\nfunction App() {\n  const [employeeData, setEmployeeData] = useState([])\n  const [detailInput, setDetailInput] = useState({\n    name: null,\n    distribution_center: null,\n    payment_type: null,\n    expired_date: null,\n    notes: null\n  })\n  const [productInput, setProductInput] = useState([\n    {\n      product_name: null,\n      unit: '',\n      quantity: '',\n      price: 0,\n      total_price: 0,\n    },\n  ])\n  const [totalPrice, setTotalPrice] = useState(0)\n  const [formStatus, setFormStatus] = useState(false) \n\n  function showPromiseConfirm() {\n    Modal.confirm({\n      title: 'Do you want to make the order?',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Your order will be saved to the database',\n      onOk() {\n        return new Promise((resolve, reject) => {\n          setTimeout(1 > 0.5 ? resolve : reject, 1000);\n        }).catch(() => console.log('Oops errors!'));\n      },\n      onCancel() {},\n    });\n  }\n\n\n\n  const addProductField = () => {\n    let newField = productInput.concat({\n      product_name: null,\n      unit: null,\n      quantity: '',\n      price: 0,\n      total_price: 0,\n    })\n    setProductInput(newField)\n  }\n  const deleteProductField = (index) => { \n    let newField = [...productInput]\n    newField.splice(index, 1) \n    setProductInput(newField)\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await Axios.get('http://dummy.restapiexample.com/api/v1/employees')\n        const { data } = await response\n        setEmployeeData(data.data);\n        console.log(data);\n      } catch (e) {\n        // console.error(e);\n        console.log(\"using static data\");\n        setEmployeeData(dataStatic); // handling response status 429\n      }\n    }; \n    fetchData();\n  }, []);\n\n  const handleChange = (name, value) => {\n    // console.log(value); \n    setDetailInput({ ...detailInput, [name]: \"\" + value })\n  } \n  \n  const handleChangeProduct = (index, name, value) => {\n    // const { value, name } = event.target \n    let productName = productInput[index].product_name\n    let product = productStatic.find(product => product.product_name === productName)\n\n    // console.log(value, name, index);\n    let newData = [...productInput]\n    if (name === 'unit') {\n      let { units } = product\n      let { price } = units.find(unit => unit.name === value)\n      newData[index].price = price\n    }\n    if (name === 'quantity' && !value) {\n      value = 0\n    }\n    newData[index][name] = value\n    setProductInput(newData) \n    if (productInput[index].price && (productInput[index].quantity || productInput[index].quantity === 0)) {\n      newData[index].total_price = productInput[index].price * productInput[index].quantity\n      setProductInput(newData)\n    }\n    if(name === 'product_name') {\n      newData[index] = { \n        product_name:value,\n        unit: '',\n        quantity: '',\n        price: 0,\n        total_price: 0,\n      }   \n      setProductInput(newData)\n    }\n  }\n\n  useEffect(() => { //validasi\n    let detailStatus = false\n    let productStatus = true \n    let {distribution_center,name,payment_type,expired_date} = detailInput\n    if(distribution_center && distribution_center !== '' && name && name !== '' && payment_type && payment_type !== '' && expired_date && expired_date !== ''){\n      detailStatus = true\n    }\n \n    for (let i = 0; i < productInput.length; i++) {\n      Object.keys(productInput[i]).find(key=>{\n        if(!productInput[i][key] || productInput[i][key] === ''){\n          productStatus = false \n        } \n        return ''\n      })\n    }\n\n    if(detailStatus && productStatus){\n      setFormStatus(true)\n    }else {\n      setFormStatus(false)\n    }\n\n  }, [detailInput, productInput])\n\n  const finish = () => {\n    // showModal()\n    showPromiseConfirm()\n    console.log(detailInput);\n    console.log(productInput);\n  }\n  useEffect(() => {\n    let totalPrice = 0\n    // console.log(\"product length : \", productInput.length);\n    productInput.forEach(el=>{\n      totalPrice += el.price*el.quantity\n    })\n    setTotalPrice(totalPrice)\n    \n  }, [productInput])\n\n  const createSelectItem = (index) => {\n    let productName = productInput[index].product_name\n    let productData = productStatic.find(product => product.product_name === productName) \n    let inputtedProduct = productInput.filter(el => el.product_name === productName)\n    let items = [];\n    if (productData) {\n      let { units } = productData\n\n      for (let i = 0; i < units.length; i++) {\n        let found = false\n        for (let y = 0; y < inputtedProduct.length; y++) {\n          if (inputtedProduct[y].unit === units[i].name) {\n            found = true\n          }\n        }\n        if (!found) { \n          items.push(<Option key={i} value={units[i].name}>{units[i].name}</Option>); \n        }\n      }\n    }\n    return items;\n  }\n  return (\n    <div className=\"App\">  \n      <div className=\"container\">\n        <h3>Create Order</h3>\n        <div className=\"form-container\" >\n          <Form\n            layout=\"vertical\"\n            onFinish={finish}\n            requiredMark={false}\n          >\n            <div >\n              <Row>\n                <Col sm={24} lg={8} style={{ fontWeight: 'bold', borderWidth: 1, borderColor: 'black' }}>\n                  Detail\n              </Col>\n                <Col sm={24} xl={14} >\n                  <Row>\n                    <Col span={18} style={{ borderWidth: 1, borderColor: 'black' }}>\n                      <Form.Item \n                        label={<><p className=\"label\">Name </p><p className=\"required\">*</p></>}\n                        name=\"name\"\n                        rules={[{ required: true, message: 'Please Input Detail Name!' }]}\n                      >\n                        <Select placeholder=\"Please select a country\" onChange={(value) => handleChange(\"name\", value)}>\n                          {\n                            employeeData.map(value => {\n                              return <Option key={value.id} value={value.employee_name}>{value.employee_name}</Option>\n                            })\n                          }\n                        </Select>\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col span={12} style={{ borderWidth: 1, borderColor: 'black' }}>\n                      <Form.Item  \n                        label={<><p className=\"label\">Distribution Center </p><p className=\"required\">*</p></>}\n                        name=\"distribution_center\"\n                        rules={[{ required: true, message: 'Please select distribution center!' }]}\n                      >\n                        <Select placeholder=\"Please select a distribution center\" onChange={(value) => handleChange(\"distribution_center\", value)}>\n                          {detailInput.name === '' || !detailInput.name ? <Option disabled value=\"\">No Data Available</Option> :\n                            dcStatic.map(value => {\n                              return <Option key={value.id} value={value.name}>{value.name}</Option>\n                            })\n                          }\n                        </Select>\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  {!detailInput.distribution_center || detailInput.distribution_center === '' ? null :\n                    <>\n                      <Row gutter={10}>\n                        <Col span={12}>\n                          <Form.Item \n                            label={<><p className=\"label\">Payment Type </p><p className=\"required\">*</p></>}\n                            name=\"payment_type\"\n                            rules={[{ required: true, message: 'Payment type is required!' }]}\n                          >\n                            <Select placeholder=\"Select Payment Type\" onChange={(value) => handleChange(\"payment_type\", value)}>\n                              {\n                                paymentTypeStatic.map(value => {\n                                  return <Option key={value.id} value={value.name}>{value.name}</Option>\n                                })\n                              }\n                            </Select>\n                          </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                          <Form.Item \n                            label={<><p className=\"label\">Expired Date </p><p className=\"required\">*</p></>}\n                            name=\"expired_date\"\n                            rules={[{ required: true, message: 'Expired date is required!' }]}\n                          >\n                            <DatePicker onChange={(date, dateString) => handleChange(\"expired_date\", dateString)} />\n                          </Form.Item>\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col span={18} style={{ borderWidth: 1, borderColor: 'black' }}>\n                          <Form.Item label=\"Notes\">\n                            <Input.TextArea placeholder=\"input placeholder\" />\n                          </Form.Item>\n                        </Col>\n                      </Row>\n                    </>\n                  }\n                  {/* </Form> */}\n                </Col>\n              </Row>\n            </div>\n            {!detailInput.distribution_center || detailInput.distribution_center === '' ? null :\n              <>\n                {/* <div style={{ padding: 10 }}>\n                  <Divider />\n                  <Row>\n                    <Col sm={24} lg={8} style={{ fontWeight: 'bold', borderWidth: 1, borderWidth: 1, borderColor: 'black' }}>\n                      Products\n                      </Col>\n                    <Col xl={14} >\n                      <div>\n                        <Row gutter={10}>\n                          <Col span={18} style={{ borderWidth: 1, borderColor: 'black' }}>\n                            <Form.Item label=\"Product\"> \n                              <Select placeholder=\"Select Product\" onChange={(value) => handleChangeProduct(0, \"product_name\", value)}>\n                                {\n                                  productStatic.map(value => {\n                                    return <Option key={value.id} value={value.product_name}>{value.product_name}</Option>\n                                  })\n                                }\n                              </Select>\n                            </Form.Item>\n                          </Col>\n                          <Col span={6} style={{ borderWidth: 1, borderColor: 'black' }}>\n                            <Form.Item label=\"Unit\">\n                              <Select placeholder=\"Select Unit Type\" onChange={(value) => handleChangeProduct(0, \"unit\", value)}>\n                                {productInput[0].name === '' ?\n                                  <Option disabled>No Data Available</Option> :\n                                  createSelectItem(0)\n                                }\n                              </Select>\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                        <Row gutter={[24, 8]}>\n                          <Col span={6} style={{ borderWidth: 1, borderColor: 'black' }}>\n                            <Form.Item style={{ marginBottom: 0 }} label=\"Quantity\">\n                              <InputNumber value={productInput[0].quantity} min={0} placesholder=\"input quantity\" value={productInput[0].quantity} onChange={(value) => handleChangeProduct(0, 'quantity', value)} />\n                            </Form.Item>\n                          </Col>\n                          <Col span={6} style={{ borderWidth: 1, borderColor: 'black' }}>\n                            <Form.Item style={{ marginBottom: 0 }} label=\"Price\">\n                              <InputNumber placeholder=\"input quantity\" name=\"price\" value={productInput[0].price} />\n                            </Form.Item>\n                          </Col>\n                          <Col span={12} style={{ borderWidth: 1, borderColor: 'black' }}>\n                            <Form.Item style={{ marginBottom: 0 }} label=\"Total Price\">\n                              <Input value={productInput[0].total_price} placeholder=\"input placeholder\" disabled />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col offset={12} span={12}>\n                            <Divider style={{ marginTop: 10, marginBottom: 10 }} />\n                            <p style={{ float: 'left', fontWeight: 'bold' }}>\n                              Total Nett Price :\n                              </p>\n                            <p style={{ float: 'right', fontWeight: 'bold' }}>\n                              {productInput[0].total_price}\n                            </p>\n                          </Col>\n                        </Row>\n                      </div>\n                    </Col>\n                  </Row>\n                </div> */}\n                {!productInput ? null :\n                  productInput.map((input, i) => (\n                    // i === 0 ? null :\n                    <div key={i} style={{ padding: 10 }}>\n                      <Row>\n                        {\n                          i === 0 ?\n                            <Col sm={24} lg={8} style={{ fontWeight: 'bold'}}>\n                              Products\n                          </Col> : null\n                        }\n                        <Col sm={24} xl={i === 0 ? { span: 14, } : { span: 14, offset: 8 }} >\n                          <Row gutter={10}>\n                            <Col span={18} style={{ borderWidth: 1, borderColor: 'black' }}>\n                              <Form.Item\n                                label={<><p className=\"label\">Product </p><p className=\"required\">*</p></>} \n                                // name={`product_name_${i}`}\n                                rules={[{ required: true, message: 'Please input product name!' }]}\n                              \n                              >\n                                <Select placeholder=\"Select Product\" value={productInput[i].product_name} onChange={(value) => handleChangeProduct(i, \"product_name\", value)}>\n                                  {\n                                    productStatic.map(value => {\n                                      return <Option key={value.id} value={value.product_name}>{value.product_name}</Option>\n                                    })\n                                  }\n                                </Select>\n                              </Form.Item>\n                            </Col>\n                            <Col span={6} style={{ borderWidth: 1, borderColor: 'black' }}>\n                              <Form.Item  \n                                // name={`unit_type_${i}`}\n                                rules={[{ required: true, message: 'Please input unit type!' }]} \n                                label={<><p className=\"label\">Unit </p><p className=\"required\">*</p></>} \n                                >\n                                <Select placeholder=\"Select Unit Type\" value={productInput[i].unit} onChange={(value) => handleChangeProduct(i, \"unit\", value)}>\n                                  {productInput[i].name === '' ?\n                                  <Option disabled >No Data Available</Option> \n                                  :\n                                    createSelectItem(i)\n                                  }\n                                </Select>\n                              </Form.Item> \n                            </Col>\n                          </Row>\n                          <Row gutter={10}>\n                            <Col span={6} style={{ borderWidth: 1, borderColor: 'black' }}>\n                              <Form.Item\n                                // name=\"quantity\"\n                                // name={`quantity1`}\n                                rules={[{ required: true, message: 'Please input product price!' }]}\n                                style={{ marginBottom: 0 }} \n                                label={<><p className=\"label\">Quantity </p><p className=\"required\">*</p></>}  \n                                >\n                                <InputNumber style={{width: '100%'}} value={productInput[i].quantity} min={0} placesholder=\"input quantity\" onChange={(value) => handleChangeProduct(i, 'quantity', value)} />\n                              </Form.Item>\n                            </Col>\n                            <Col span={6} style={{ borderWidth: 1, borderColor: 'black' }}>\n                              <Form.Item \n                                // name=\"price\"\n                                // rules={[{ required: true, message: 'Please input product price!' }]}\n                                style={{ marginBottom: 0 }} \n                                label={<><p className=\"label\">Unit </p><p className=\"required\">*</p></>}  \n                                > \n                                <InputNumber style={{width: '100%'}} placeholder=\"input quantity\" name=\"price\" value={productInput[i].price} />\n                              </Form.Item>\n                            </Col>\n                            <Col span={12} style={{ borderWidth: 1, borderColor: 'black' }}>\n                              <Form.Item \n                                // name=\"total_price\"\n                                rules={[{ required: true, message: '' }]}\n                                className=\"totalPriceContainer\" \n                                label={<><p style={{marginTop:0, marginBottom:0,width:'100%'}}>Total Price</p><p className=\"required\">*</p></>}>\n                                <Input name=\"\" value={productInput[i].total_price} style={{ textAlign: 'right' }} placeholder=\"input placeholder\" disabled />\n                              </Form.Item>\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col span={12}>\n                              {\n                                i === 0 ? null :\n                                  <Button\n                                    style={{ paddingRight: 0, marginTop:10 }}\n                                    onClick={() => deleteProductField(i)}\n                                    danger\n                                    type=\"primary\">Delete Field <MinusOutlined /> </Button>\n                              }\n                            </Col>\n                            <Col span={12}>\n                              <Divider style={{ marginTop: 10, marginBottom: 10 }} />\n                              <p style={{ float: 'left', fontWeight: 'bold' }}>\n                                Total Nett Price :\n                                  </p>\n                              <p style={{ float: 'right', fontWeight: 'bold' }}>\n                                {productInput[i].total_price}\n                              </p>\n                            </Col>\n                          </Row>\n                        </Col>\n                      </Row>\n                    </div>\n                  ))}\n                <Row>\n                  <Col offset={8}>\n                    <Form.Item>\n                      <Button\n                        style={{ paddingRight: 0, background: \"#f5bb0c\", borderColor: \"#c7980a\"  }}\n                        onClick={addProductField} \n                        type=\"primary\"\n                        >New item <PlusOutlined /> </Button>\n                    </Form.Item>\n                  </Col>\n                </Row>\n                <Row> \n                  <Col offset={12} span={10}>\n                    <Divider style={{ marginTop: 10, marginBottom: 10 }} />\n                    <p style={{ float: 'left', fontWeight: 'bold', fontSize:18 }}>\n                      Total :\n                    </p>\n                    <p style={{ float: 'right', fontWeight: 'bold' }}>\n                      {totalPrice}\n                    </p>\n                  </Col>\n                </Row>\n              </>\n            }\n            <Divider />\n            <div style={{ textAlign: 'right', padding: 10, paddingRight: 20 }}>\n              <Button type=\"text\">Cancel</Button>\n              <Button \n                style={formStatus?{background: \"#03a10d\", borderColor: \"#03a10d\"}:{background: \"#d4d4d4\", borderColor: \"#ababab\"}}\n                type=\"primary\" \n                disabled={!formStatus}\n                htmlType=\"submit\">Submit</Button>\n            </div>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/zanadh/Documents/technical_test/src/reportWebVitals.js",[],"/home/zanadh/Documents/technical_test/src/index.js",[],{"ruleId":"16","severity":1,"message":"17","line":171,"column":41,"nodeType":"18","messageId":"19","endLine":176,"endColumn":8},"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'productStatus'.","ArrowFunctionExpression","unsafeRefs"]